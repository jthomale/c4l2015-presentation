
You Gotta Keep 'em Separated
  The Case for "Bento Box" Discovery Interfaces

  
I'm Jason Thomale, I'm the Resource Discovery Systems Librarian at the University of North Texas. I'm here to make the case for "bento box" discovery interfaces.

------

So, I submit to you the following.

------

First the obligatory, here's where the "bento box" UI metaphor comes from. A Japanese lunch where

------

several different types of delicious food

------

are subdivided into little compartments.

------

Bento box.

------

And so here we have a search results UI where

------

results are subdivided

------

into compartments by category,

------

like a Japanese bento box. This is from University of Michigan Libraries. Which is great and all, but isn't this just another in a long line of library hacks and workarounds?

------

Well, last I'll show you another search results UI where, again,

------

results are subdivided

------

into compartments by category.

------

Bento box ...

------

[next next next]

from Google!

------

Questions? [Hopefully pause for laughter] But seriously--I do have to fill 20 minutes, here...

------

so, yeah. In reality I just couldn't decide how to start my presentation--I created two separate beginnings, and I thought, why not use both? So that was the first one. 

All right. As I said, I'm Jason Thomale, yada yada, and I'm going to try to make the case for Bento Box discovery interfaces.

------

The thing about talking about this at Code4lib is that the Code4lib community is professionally pretty diverse. And when we're talking about bento box interfaces,

------

we have a distinct bias toward academic libraries.

------

I mean that *is* where the term originated and, as far as I know, that's mainly the context where it's used. I think the accepted story is that NCSU had the first bento box interface, and Tito Sierra (at NCSU at the time) coined the term to describe it.

And--especially in academic libraries, we have sort of a collective history of implementing what we might call 

------

"hacks," especially when trying to facilitate a particular user experience on our websites. I don't mean this disparagingly, by the way, as we're all pretty much in this boat. We often have to get

------

different systems from different vendors to play nicely together.

------

Sometimes we need to customize things that aren't easily customizable. 

------

Sometimes we need to try to get data out of systems that just don't want to give it up.

------

Sometimes we just need to use a little duct tape to make things work together the way we want.

------

Granted, things are better than they used to be. Open source software in libraries is thriving, and it's become more or less the norm for vendors to offer APIs or other methods of getting at our data. 

------

And so we build better and more sophisticated hacks--like this lovely treadmill bike. Or bento box discovery interfaces.

But here's the thing; as I look at resource discovery solutions in libraries and outside of libraries, as I look at how users interact with our discovery systems,

------

I'm seeing bento box as an interesting type of UI for more reasons than just the solutions it provides for the immediate problems it was designed to work around. While it's true that those problems are real for academic libraries and bento box UIs are still attractive to us as a solution to those problems, I'm becoming more convinced that there's more to it than that.

------

Before we get into that, let's delve into "bento box UI as hack." What

------

are the actual problems it was meant to solve?

------

<next>

------

I tried to think of a way to start this section that didn't involve telling this story, because it's one we all know so damn well. But I'll just refresh our memories and make sure we're all up to speed, all right? (Forgive the oversimplification.)

------

Years ago, library user studies show: Google--good, easy to use; library systems bad, hard to use.

So we say: let's make library systems more like Google!

And what is Google?

A single search box that searches a Web index and presents results in a relevance-ranked list.

And what are library systems?

Information silos! Many data stores, impossible to search at once, users have to know which ones to use or how to find out which ones to use. Different vendors, publishers, etc. not wanting to give up control of their content, yada yada.

So we say: well, let's take a user's search and send it out to lots of systems at once for them! Yeah! So much like Google!

Nope. Not like Google. Too slow. Too many possible endpoints. No way to relevance rank results effectively. Nobody likes to use it.

So we say: we need a central index. That's what Google has.

Some of us start putting stuff in Solr--catalog, digital collections, repository, library website. Stuff we can get. We put interfaces on top. Next Generation Catalogs, yeah! So awesome!

Users say: but where's the articles?

So we say: let's make deals with publishers and build a big ass central index. Vendors only, no open source. :-( Let's put the catalog and other stuff in it too for good measure. Yeah! Web scale discovery! 

*Now* are we like Google? Let's see:

Single index? Check.

Single relevance-ranked results list? Check.

Single search box? Check. Theoretically.

All right. So let's talk about where bento box fits into this.

The story of library discovery so far is basically one of hacks. Or, if you prefer, "workarounds." Workarounds for the simple fact that libraries aren't the Web. Libraries' resources are not Web resources, in terms of their content, structure, licensing, etc.

Of course, most workarounds have drawbacks. Web scale discovery, as useful as it truly is, has drawbacks. And those drawbacks are what bento box interfaces were designed to work around.

The main drawback is that heterogenous types of resources being searched in one index mean that, even with great relevance ranking, smaller pools of resources can get drowned out by larger pools of resources. Someone might be looking for books

(And sure--if you know what you're doing you can futz with the facets and find what you want, but users tend not to mess with facets much.)




















